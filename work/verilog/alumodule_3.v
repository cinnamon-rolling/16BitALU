/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alumodule_3 (
    input clk,
    input rst,
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] alu,
    output reg [0:0] z,
    output reg [0:0] v,
    output reg [0:0] n
  );
  
  
  
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_n;
  reg [6-1:0] M_add_alufn;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  add_4 add (
    .clk(clk),
    .rst(rst),
    .alufn(M_add_alufn),
    .a(M_add_a),
    .b(M_add_b),
    .out(M_add_out),
    .v(M_add_v),
    .z(M_add_z),
    .n(M_add_n)
  );
  wire [16-1:0] M_compare_out;
  reg [6-1:0] M_compare_alufn;
  reg [1-1:0] M_compare_z;
  reg [1-1:0] M_compare_v;
  reg [1-1:0] M_compare_n;
  compare_5 compare (
    .clk(clk),
    .rst(rst),
    .alufn(M_compare_alufn),
    .z(M_compare_z),
    .v(M_compare_v),
    .n(M_compare_n),
    .out(M_compare_out)
  );
  wire [16-1:0] M_boolean_out;
  reg [6-1:0] M_boolean_alufn;
  reg [16-1:0] M_boolean_a;
  reg [16-1:0] M_boolean_b;
  boolean_6 boolean (
    .clk(clk),
    .rst(rst),
    .alufn(M_boolean_alufn),
    .a(M_boolean_a),
    .b(M_boolean_b),
    .out(M_boolean_out)
  );
  wire [16-1:0] M_shift_out;
  reg [6-1:0] M_shift_alufn;
  reg [16-1:0] M_shift_a;
  reg [16-1:0] M_shift_b;
  shift_7 shift (
    .clk(clk),
    .rst(rst),
    .alufn(M_shift_alufn),
    .a(M_shift_a),
    .b(M_shift_b),
    .out(M_shift_out)
  );
  
  always @* begin
    M_add_a = a;
    M_add_b = b;
    M_add_alufn = alufn;
    M_compare_v = M_add_v;
    M_compare_n = M_add_n;
    M_compare_z = M_add_z;
    M_compare_alufn = alufn;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn = alufn;
    M_shift_a = a;
    M_shift_b = b;
    M_shift_alufn = alufn;
    z = M_add_z;
    v = M_add_v;
    n = M_add_n;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = M_add_out;
      end
      2'h1: begin
        alu = M_boolean_out;
      end
      2'h2: begin
        alu = M_shift_out;
      end
      2'h3: begin
        alu = M_compare_out;
      end
      default: begin
        alu = 16'h0000;
      end
    endcase
  end
endmodule
