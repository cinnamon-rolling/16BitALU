/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module test_cases_2 (
    input clk,
    input rst,
    output reg [7:0] led_result,
    output reg [7:0] led_alu_1,
    output reg [7:0] led_alu_2
  );
  
  
  
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  localparam ADD_state = 2'd0;
  localparam SUBTRACT_state = 2'd1;
  localparam ERROR_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = ADD_state;
  reg [15:0] M_alu_d, M_alu_q = 1'h0;
  reg [0:0] M_z_d, M_z_q = 1'h0;
  reg [0:0] M_v_d, M_v_q = 1'h0;
  reg [0:0] M_n_d, M_n_q = 1'h0;
  wire [16-1:0] M_alumodule_alu;
  wire [1-1:0] M_alumodule_z;
  wire [1-1:0] M_alumodule_v;
  wire [1-1:0] M_alumodule_n;
  reg [6-1:0] M_alumodule_alufn;
  reg [16-1:0] M_alumodule_a;
  reg [16-1:0] M_alumodule_b;
  alumodule_3 alumodule (
    .clk(clk),
    .rst(rst),
    .alufn(M_alumodule_alufn),
    .a(M_alumodule_a),
    .b(M_alumodule_b),
    .alu(M_alumodule_alu),
    .z(M_alumodule_z),
    .v(M_alumodule_v),
    .n(M_alumodule_n)
  );
  
  reg [15:0] expected_alu;
  
  always @* begin
    M_state_d = M_state_q;
    M_v_d = M_v_q;
    M_alu_d = M_alu_q;
    M_counter_d = M_counter_q;
    M_n_d = M_n_q;
    M_z_d = M_z_q;
    
    M_counter_d = M_counter_q + 1'h1;
    led_result = 8'h00;
    led_alu_1 = 8'h00;
    led_alu_2 = 8'h00;
    M_alu_d = M_alumodule_alu;
    M_z_d = M_alumodule_z;
    M_v_d = M_alumodule_v;
    M_n_d = M_alumodule_n;
    M_alumodule_a = 16'h0000;
    M_alumodule_b = 16'h0000;
    M_alumodule_alufn = 6'h00;
    
    case (M_state_q)
      ADD_state: begin
        M_alumodule_alufn = 6'h00;
        M_alumodule_a = 16'h55ab;
        M_alumodule_b = 16'h2044;
        expected_alu = 16'h75ef;
        led_alu_1 = M_alu_q[0+7-:8];
        led_alu_2 = M_alu_q[8+7-:8];
        if (M_alu_q == expected_alu & M_z_q == 1'h0 & M_v_q == 1'h0 & M_n_q == 1'h0) begin
          led_result = 8'h00;
          if (M_counter_q[27+0-:1] == 1'h0) begin
            M_state_d = SUBTRACT_state;
          end
        end else begin
          M_state_d = ERROR_state;
        end
      end
      SUBTRACT_state: begin
        M_alumodule_alufn = 6'h01;
        M_alumodule_a = 16'h95ab;
        M_alumodule_b = 16'h8044;
        expected_alu = 16'h1567;
        led_alu_1 = M_alu_q[0+7-:8];
        led_alu_2 = M_alu_q[8+7-:8];
        if (M_alu_q == expected_alu & M_z_q == 1'h0 & M_v_q == 1'h1 & M_n_q == 1'h0) begin
          led_result = 8'h40;
          if (M_counter_q[27+0-:1] == 1'h1) begin
            M_state_d = ADD_state;
          end
        end else begin
          M_state_d = ERROR_state;
        end
      end
      ERROR_state: begin
        if (M_counter_q[27+0-:1] == 1'h1) begin
          led_result = 8'hff;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_alu_q <= 1'h0;
      M_z_q <= 1'h0;
      M_v_q <= 1'h0;
      M_n_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_alu_q <= M_alu_d;
      M_z_q <= M_z_d;
      M_v_q <= M_v_d;
      M_n_q <= M_n_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
