module add (
    input clk,  // clock
    input rst,  // reset
    
    input alufn[6],
    input a[16],  
    input b[16],
    output out[16],
    output v[1],
    output z[1],
    output n[1]
  ) {
  
  sig sum_intermediate[16];                
    
  always {
    
    case(alufn[0]){
        1b0: // if alufn[0]==0, add a to b
          sum_intermediate = a+b;
          v = (((a[15])&(b[15])&(~sum_intermediate[15])) | ((~a[15])&(~b[15])&(sum_intermediate[15]))); // checking for addition overflow
        1b1: // if alufn[0]==1, subtract b from a
          sum_intermediate = a-b;
          v = (((a[15])&(b[15])&(~sum_intermediate[15])) | ((~a[15])&(~b[15])&(sum_intermediate[15]))); // checking for subtraction overflow
        default:
          sum_intermediate = a+b; 
          v = (((a[15])&(b[15])&(~sum_intermediate[15])) | ((~a[15])&(~b[15])&(sum_intermediate[15])));           
    }
        
    out = sum_intermediate[15:0];     // output value of sum_intermediate
    z = ~|sum_intermediate;            // z=1 if all bits of sum_intermediate=0
    n = sum_intermediate[15];          // n=1 if most significant bit of sum_intermediate=1 (if output sum_intermediate is a negative number)
  }
}