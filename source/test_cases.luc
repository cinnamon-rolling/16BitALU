module test_cases (
    input clk,  // clock
    input rst,  // reset
    input toggle_dip[1], // toggle output to be correct or wrong
    
    // outputs
    output led_result[8],
    output led_alu_1[8],
    output led_alu_2[8]
  ) {
  
    .clk(clk){
      //edge_detector edge_detector(#RISE(1), #FALL(0));
    
  .rst(rst) {
    dff counter[28];     // time taken for each cycle is 2^28/50E6
    fsm state = {ADD, SUBTRACT, MULTIPLY, DIVIDE, AND, OR, XOR, A, SHL, SHR, SRA, CMPEQ, CMPLT, CMPLE};
    fsm toggle = {TRUE, FALSE};
    alumodule alumodule;
    multiply multiply;
    }
  }
    
sig expected_alu[16];
sig alu[16];
sig z[1];
sig v[1];
sig n[1];
sig expected_mul[16];
sig out_mul[16];
  
  always {
    // initialise
    counter.d = counter.q + 1; // connects dff's input to output + 1. everytime clk goes to high, d = q + 1
    led_result = 8b00000000;
    led_alu_1 = 8b00000000;
    led_alu_2 = 8b00000000;

    alu = alumodule.alu;
    z = alumodule.z;
    v = alumodule.v;
    n = alumodule.n;
    out_mul = multiply.mul;
    
    alumodule.a = 16b0000000000000000;
    alumodule.b = 16b0000000000000000;
    alumodule.alufn = 6b000000;
    multiply.a = 8b00000000;
    multiply.b = 8b00000000;
    multiply.in = 1b0;
    
    // toggle dip so that case will stop once the alu output is false
    case (toggle_dip) {
    0: toggle.d = toggle.TRUE;
    1: toggle.d = toggle.FALSE;
    }
    
    case (toggle.q) {
      toggle.TRUE:
      alu = alu;
      toggle.FALSE:
      alu = 16b1100000000000000;
    }
    
    // 14 test cases to check for output of each unit, whether they are correct, check with hardcoded answer
    case (state.q){
      // add: ADD: a = 16b0101010110101011, b = 16b0010000001000100
      state.ADD:
        alumodule.alufn = 6b000000;             
        alumodule.a = 16b0101010110101011;
        alumodule.b = 16b0010000001000100;
        
        expected_alu = 16b0111010111101111;
        led_alu_1 = alu[7:0];
        led_alu_2 = alu[15:8];
        
        
        if (alu == expected_alu & z == 0 & v == 0 & n == 0){
            led_result = 8b10000000;
            
            if (counter.q[27] == 1){
              state.d = state.SUBTRACT;
                }
            }
      //  else {
      //       state.d = state.ERROR;
      //       }
      
      // add: SUBTRACT: a = 16b1001010110101011, b = 16b1000000001000100
      state.SUBTRACT:
          alumodule.alufn = 6b000001;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b1000000001000100;
            
          expected_alu = 16b01010101100111;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu & z == 0 & v == 1 & n == 0){
            led_result = 8b01000000;
             
            if (counter.q[27] == 0){
              state.d = state.MULTIPLY;
                }
            }
      
      // multiply: MULTIPLY (separated from alu): a = 8b00111111, b = 8b00000011
      state.MULTIPLY:
        multiply.a = 8b00111111;
        multiply.b = 8b00000011;
        multiply.in = 1b0; // multiply
        
        expected_mul = 16b0000000010111101;
        
        led_alu_1 = multiply.mul[7:0];
        led_alu_2 = multiply.mul[15:8];
        
        if (out_mul == expected_mul){
          led_result = 8b00100000;
          
          if (counter.q[27] == 1){
            state.d = state.DIVIDE;
          }
        }
        
      // multiply: DIVIDE (separated from alu): a = 8b00111111, b = 8b00000011
      state.DIVIDE:
        multiply.a = 8b00111111;
        multiply.b = 8b00000011;
        multiply.in = 1b1; // divide
        
        expected_mul = 16b0000000000010101;
        
        led_alu_1 = multiply.mul[7:0];
        led_alu_2 = multiply.mul[15:8];
        
        if (out_mul == expected_mul){
          led_result = 8b00010000;
          
          if (counter.q[27] == 0){
            state.d = state.AND;
          }
        }
      
      // compare: AND: a = 16b1001010110101011, b = 16b1000000001000100
      state.AND:
          alumodule.alufn = 6b011000;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b1000000001000100;
            
          expected_alu = 16b1000000000000000;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b00001000;
             
            if (counter.q[27] == 1){
              state.d = state.OR;
                }
            }
        
      // compare: OR: a = 16b1001010110101011, b = 16b1000000001000100
      state.OR:
          alumodule.alufn = 6b011110;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b1000000001000100;
            
          expected_alu = 16b1001010111101111;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b00000100;
             
            if (counter.q[27] == 0){
              state.d = state.XOR;
                }
            }
      // compare: XOR: a = 16b1001010110101011, b = 16b1000000001000100
      state.XOR:
          alumodule.alufn = 6b010110;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b1000000001000100;
            
          expected_alu = 16b0001010111101111;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b00000010;
             
            if (counter.q[27] == 1){
              state.d = state.A;
                }
            }
      
      // compare: A: a = 16b1001010110101011, b = 16b1000000001000100
      state.A:
          alumodule.alufn = 6b011010;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b1000000001000100;
            
          expected_alu = 16b1001010110101011;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b00000001;
             
            if (counter.q[27] == 0){
              state.d = state.SHL;
                }
            }
      
      // shift: SHL: a = 16b1001010110101011, b = 16b0000000000000001
      state.SHL:
          alumodule.alufn = 6b100000;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b0000000000000001;
            
          expected_alu = 16b0010101101010110;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b11000000;
             
            if (counter.q[27] == 1){
              state.d = state.SHR;
                }
            }
       
      // shiftL SHR: a = 16b1001010110101011, b = 16b0000000000000001
      state.SHR:
          alumodule.alufn = 6b100001;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b0000000000000001;
            
          expected_alu = 16b0100101011010101;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b10100000;
             
            if (counter.q[27] == 0){
              state.d = state.SRA;
                }
            }
      
      // shift: SRA: a = 16b1001010110101011, b = 16b0000000000000001
      state.SRA:
          alumodule.alufn = 6b100011;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b0000000000000001;
            
          expected_alu = 16b1100101011010101;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b10010000;
             
            if (counter.q[27] == 1){
              state.d = state.CMPEQ;
                }
            }
        
      // compare: CMPEQ: a = 16b1001010110101011, b = 16b1000000001000100
      state.CMPEQ:
          alumodule.alufn = 6b110011;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b1000000001000100;
            
          expected_alu = 16b0000000000000000;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b10001000;
             
            if (counter.q[27] == 0){
              state.d = state.CMPLT;
                }
            }
        
      // compare: CMPLT: a = 16b1001010110101011, b = 16b1000000001000100
      state.CMPLT:
          alumodule.alufn = 6b110101;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b1000000001000100;
            
          expected_alu = 16b0000000000000001;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b10000100;
             
            if (counter.q[27] == 1){
              state.d = state.CMPLE;
                }
            }
      // compare COMPLE: a = 16b1001010110101011, b = 16b1000000001000100
      state.CMPLE:
          alumodule.alufn = 6b110101;
          alumodule.a = 16b1001010110101011;
          alumodule.b = 16b1000000001000100;
            
          expected_alu = 16b0000000000000001;
          led_alu_1 = alu[7:0];
          led_alu_2 = alu[15:8];

          
          if (alu == expected_alu){
            led_result = 8b10000010;
             
            if (counter.q[27] == 0){
              state.d = state.ADD;
                }
            }
        }
     
        
    }
  }
